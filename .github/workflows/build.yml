name: Build

on:
  push:
    branches:
      - main
  pull_request:
    branches:    
      - main

jobs:
  build:

    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-2019]

    steps:
      - name: Echo Context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      - name: Checkout Perfcat
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Checkout Frida v15.1.17
        run: |
          git clone --recursive https://github.com/frida/frida.git ../frida
          cd ../frida
          git checkout 15.1.17
      - name: Use Node.js v14.x
        uses: actions/setup-node@v2
        with:
          node-version: 14
      - name: Use Python v3.x
        uses: actions/setup-python@v3
        with:
          python-version: '3.x'
      - name: Install System Requirements (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential lib32stdc++-9-dev libc6-dev-i386
      - name: Create Certificate (macOS)
        if: matrix.os == 'macos-latest'
        env:
          DIR: ${{ runner.temp }}
        run: |
          ./scripts/macos-setup-codesign-action.sh
      - name: Setup Visual Studio
        if: matrix.os == 'windows-2019'
        uses: microsoft/setup-msbuild@v1.1
      - name: Install Node Global Deps
        env:
          npm_config_runtime: electron
          npm_config_target: 13.3.0
          npm_config_disturl: https://electronjs.org/headers
        run: |
          yarn global add node-gyp prebuild electron-builder
          npm config set msvs_version 2019 --global
      - name: Install Python Global Deps
        run: |
          pip install colorama prompt-toolkit pygments
      - name: Build Frida (Linux)
        if: matrix.os == 'ubuntu-latest'
        working-directory: ../frida
        env:
          npm_config_runtime: electron
          npm_config_target: 13.3.0
          npm_config_disturl: https://electronjs.org/headers
        run: |
          make node-linux-x86_64 NODE=$(which node)
      - name: Build Frida (MacOS)
        if: matrix.os == 'macos-latest'
        working-directory: ../frida
        env:
          npm_config_runtime: electron
          npm_config_target: 13.3.0
          npm_config_disturl: https://electronjs.org/headers
          MACOS_CERTID: frida-cert
        run: |
          make node-macos NODE=$(which node)
      - name: Build Frida Node (*NIX)
        if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'
        working-directory: ../frida/frida-node
        env:
          npm_config_runtime: electron
          npm_config_target: 13.3.0
          npm_config_disturl: https://electronjs.org/headers
          MACOS_CERTID: frida-cert
        run: |
          export FRIDA=$(pwd)/../
          npm install
          npm run prebuild -- -t 13.3.0 -r electron
          ln -s $(pwd)/../ ../../perfcat/frida
      - name: Build Frida Node (Windows)
        if: matrix.os == 'windows-2019'
        working-directory: ../frida/frida-node
        env:
          npm_config_runtime: electron
          npm_config_target: 13.3.0
          npm_config_disturl: https://electronjs.org/headers
        run: |
          $env:FRIDA="${pwd}\..\"
          npm install
          npm run prebuild -- -t 13.3.0 -r electron
          New-Item -ItemType Junction -Path "..\..\perfcat\frida" -Target "${pwd}\..\"
      - name: Yarn
        env:
          npm_config_runtime: electron
          npm_config_target: 13.3.0
          npm_config_disturl: https://electronjs.org/headers
        run: |
          yarn
      - name: Electron Build
        env:
          USE_HARD_LINKS: "false"
        run: |
          yarn electron:build
      - name: Cleanup Artifacts (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          mkdir artifacts
          mv dist_electron/*.AppImage artifacts || true
      - name: Cleanup Artifacts (macOS)
        if: matrix.os == 'macOS-latest'
        run: |
          mkdir artifacts
          mv dist_electron/*.dmg artifacts || true
      - name: Cleanup Artifacts (Windows)
        if: matrix.os == 'windows-2019'
        run: |
          mkdir artifacts
          mv dist_electron/*.exe artifacts
      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{matrix.os}}
          path: artifacts
